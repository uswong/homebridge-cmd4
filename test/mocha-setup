// Define common functions and values for all unit tests.

const which = require('which');
const path = require( "path" );

// Get the real path of homebridge instead of a dev dependancy,
// which caused issues if you forget to update dependancies but
// upgrade homebridge.
const homebridgePath = which.sync( 'homebridge', { nothrow: true } )

let apiPath;
if ( homebridgePath )
{
   let dirname = path.dirname( homebridgePath );

   console.log( "Found homebridge in path %s", dirname );
   apiPath = `${ dirname }/../lib/node_modules/homebridge/lib/api`;
   global.HomebridgeAPI = require( apiPath ).HomebridgeAPI;

   if ( ! global.HomebridgeAPI )
   {
      console.log( "homebridgeAPI not available !!!" );
      process.exit( 10 );
   }
   loggerPath = `${ dirname }/../lib/node_modules/homebridge/lib/logger`;
   global.logger_1 = require( loggerPath );
   if ( ! global.logger_1 )
   {
      console.log( "logger_1 not available !!!" );
      process.exit( 10 );
   }

   // For serializing/deserializing arrays of accessories
   let platformAccessoryPath = `${ dirname }/../lib/node_modules/homebridge/lib/platformAccessory`;
   global.platformAccessory_1 = require( platformAccessoryPath );

} else
{
   console.log( "homebridge not found !!!" );
   process.exit( 10 );
}
console.log( "Found api in %s", apiPath );

global.fs = require( 'fs' );
global.assert = require( "chai" ).assert;
global.expect = require( "chai" ).expect;
global.sinon  = require( "sinon" );

global.ACC_EOL = 222;
global.DEVICE_EOL = 66;

// These would be the uninitialized values, used for unit testing
global.ACC_DATA = require( '../lib/CMD4_ACC_TYPE_ENUM' );
global.CMD4_ACC_TYPE_ENUM = ACC_DATA.CMD4_ACC_TYPE_ENUM;

global.DEVICE_DATA = require( '../lib/CMD4_DEVICE_TYPE_ENUM' );
global.CMD4_DEVICE_TYPE_ENUM = DEVICE_DATA.CMD4_DEVICE_TYPE_ENUM;



// Logging capture utility
// Usage:
//
// 1. Call captureConsole so it has a
//    reference to console.
//       hook = captureConsole( );
//
// 2. Start capturing stderr and stdout:
//       hook.start( );
//
// 3. If you want to see what is going to the
//    console as well
//       hook.setQuiet( false );
//
// 4. Inspect the log at any time with:
//       x = hook.capturedErr( );   <= Stderr
//       x = hook.capturedLog( );
//     Note: logger.log.info goes to console.log
//     Note: logger.log.warn goes to console.err
//
// 5. Put things back to normal with:
//       hook.stop( );
//
// 6. Reset contents of saved buffers with:
//       hook.reset( );
//
global.captureConsole = function( )
{
   var oldError = console.error;
   var oldLog = console.log;
   var errLogBuf = '';
   var logBuf = '';
   let quiet = true;
   return {
      start: function start( )
      {
         console.error = function( chunk, encoding )
         {
            errLogBuf += chunk.toString( ); // chunk is a String or Buffer

            if ( quiet == false )
               oldError.apply( chunk, arguments );
         };
         console.log = function( chunk, encoding )
         {
            logBuf += chunk.toString(); // chunk is a String or Buffer

            if ( quiet == false )
               oldError.apply( chunk, arguments );
         };
      },
      stop: function stop( )
      {
         console.error = oldError;
         console.log = oldLog;
      },
      setQuiet: function setQuiet( q = false )
      {
         quiet = q;
      },
      reset: function reset( )
      {
         errLogBuf = "";
         logBuf = "";
      },
      capturedErr: function( )
      {
         return errLogBuf;
      },
      capturedLog: function( )
      {
         return logBuf;
      }
   };
}

global.hook = captureConsole( );


// A true sleep ( blocking ).
const moment = require( "moment" );
global.sleep = function( secondsToSleep = 1 )
{
   let sleepUntill = moment( ).add( secondsToSleep, 'seconds');
   while( moment ( ).isBefore( sleepUntill ) ) { /* block the process */ }
}

// How it's used
// sleep( 10 );
