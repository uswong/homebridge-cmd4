#!/usr/bin/env node
"use strict";

// File System utilities
let fs = require("fs");

// Command line parser
const { Command } = require( "commander" );
const program = new Command;

const constants = require( "../cmd4Constants" );

var cmd4Files = [ "./Cmd4Platform.js",
                  "./Cmd4Accessory.js",
                  "./Cmd4PriorityPollingQueue.js",
                  "./utils/HV.js",
                  "./index.js",
                  "./lib/CMD4_DEVICE_TYPE_ENUM.js",
                  "./tools/Cmd4AccDocGenerator"];

// A nice little getOpt node.js package
program
  .description( 'Determine where a given constant is in our source.' )
  .requiredOption( '-c, --constant <constant value>', 'Constant to search for>' )
  .option( '-r, --reverse', 'Look for key of constant' )
  .option( '-v, --verbose', 'Show verbose search results' );

// Parse the arguments passed into this program.
program.parse( process.argv );


// Get the options passed in based on the commander getOpts definitions.
let options = program.opts( );

// This is the count of the found constants in result
let foundCount=0;

// Stop after finding this many
const MAX_FOUND_BEFORE_EXIT = 3

// The regex to find the constant in the source files
// A great regex site:
// https://regex101.com/r/bE3c0x/5
let reg;

let lookingFor = "";

if ( options.reverse )
{
   // WORKS. Ex:   whereIsConstant -r -v -c PUBLISHEXTERNALLY
   lookingFor = constants[ options.constant ];
   if ( lookingFor == undefined )
   {
      console.error( `Constant key: ${ options.constant } not defined in cmd4Constants.js` );
      process.exit( 1 );
   }
   reg = `.*constants.${ options.constant }.*$`;
   // My logic seems reversed, but that is not true
   console.log( `Looking for: constants.${ options.constant }` );
   if ( options.verbose )
      console.log( `using regex: ${ reg }` );
} else
{
   // Works. Ex:   whereIsConstant -r -v -c publishExternally
   lookingFor = Object.keys( constants ).find(key => constants[ key ] === options.constant );
   if ( lookingFor == undefined )
   {
      console.error( `Constant value: ${ options.constant } not defined in cmd4Constants.js` );
      process.exit( 1 );
   }
   reg = `\w*.${ options.constant }.*$`;
   // My logic seems reversed, but that is not true
   console.log( `Looking for: <word>.${ lookingFor }` );
   if ( options.verbose )
      console.log( `using regex: ${ reg }` );
}
const regex = new RegExp( reg );


// The constant must be in one of the Cmd4 source files
for ( let fileIndex = 0;
          (fileIndex < cmd4Files.length );
          fileIndex++ )
{
   let cmd4File = cmd4Files[ fileIndex ];
   if ( options.verbose )
      console.log( `Checking file: ${ cmd4File }` );

   // Read in all the code from the source file
   let code =  fs.readFileSync( cmd4File, "utf8" );

   // If I could grep the source file I would, so
   // check the regex against each line
   var codeLines = code.split( '\n' );
   let lineCount = 0;
   for ( let lineIndex = 0;
             lineIndex < codeLines.length;
             lineIndex++, lineCount++ )
   {
      let line = codeLines[ lineIndex ];

      // Check the regex
      let t = regex.test( line );
      if ( t == true )
      {
         foundCount++;
         if ( foundCount == 1 )
         {
            process.stdout.write( `Found in ${ cmd4File }` );
         }
         else if ( foundCount <= MAX_FOUND_BEFORE_EXIT )
         {
            process.stdout.write( `, ${ cmd4File }` );
         }
         else
         {
            process.stdout.write(` ...\n` );
            process.exit( 0 );
         }
      }
   }
   if (foundCount == MAX_FOUND_BEFORE_EXIT )
      break;
}
if (foundCount == 0 )
{
   console.log( `constant: ${ options.constant } not found in Cmd4 source files` );
   process.exit( 1 );
} else
{
   // Trailing \n
   console.log("");
}
process.exit( 0 );

